package vulnerability

import (
	"strings"

	"github.com/NucleoFusion/cruise/internal/keymap"
	"github.com/NucleoFusion/cruise/internal/styles"
	"github.com/charmbracelet/bubbles/help"
	"github.com/charmbracelet/bubbles/key"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type Vulnerability struct {
	Width     int
	Height    int
	Help      help.Model
	IsLoading bool
	List      *VulnerabilityList
}

func NewVulnerability(w int, h int) *Vulnerability {
	return &Vulnerability{
		Width:     w,
		Height:    h,
		IsLoading: true,
		Help:      help.New(),
		List:      NewVulnerabilityList(w-4, h-7-strings.Count(styles.VulnerabilityText, "\n")),
	}
}

func (s *Vulnerability) Init() tea.Cmd {
	return nil
}

func (s *Vulnerability) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	return s, nil
}

func (s *Vulnerability) View() string {
	return lipgloss.JoinVertical(lipgloss.Center,
		styles.TextStyle().Render(styles.VulnerabilityText), s.List.View(), s.Help.View(keymap.NewDynamic([]key.Binding{})))
}

// func (s *Vulnerability) GetListText() string {
// 	if s.IsLoading {
// 		return lipgloss.Place(s.Width-2, s.Height-4-strings.Count(styles.VulnerabilityText, "\n"),
// 			lipgloss.Center, lipgloss.Top, "Loading...")
// 	}
//
// 	return lipgloss.NewStyle().Padding(1).Render(s.List.View())
// }
//
// func (s *Vulnerability) Refresh() tea.Cmd {
// 	return tea.Tick(3*time.Second, func(_ time.Time) tea.Msg {
// 		items, err := docker.GetVulnerability()
// 		if err != nil {
// 			return utils.ReturnError("Vulnerability Page", "Error Querying Images", err)
// 		}
// 		return messages.VulnerabilityReadyMsg{Items: items}
// 	})
// }
