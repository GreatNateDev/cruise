package vulnerability

import (
	"errors"
	"strings"
	"time"

	"github.com/NucleoFusion/cruise/internal/docker"
	"github.com/NucleoFusion/cruise/internal/keymap"
	"github.com/NucleoFusion/cruise/internal/messages"
	styledhelp "github.com/NucleoFusion/cruise/internal/models/help"
	"github.com/NucleoFusion/cruise/internal/styles"
	"github.com/NucleoFusion/cruise/internal/utils"
	"github.com/charmbracelet/bubbles/key"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type Vulnerability struct {
	Width       int
	Height      int
	Keymap      keymap.VulnMap
	Help        styledhelp.StyledHelp
	IsLoading   bool
	ListFocused bool
	List        *VulnerabilityList
	ScanList    *ScanList
}

func NewVulnerability(w int, h int) *Vulnerability {
	return &Vulnerability{
		Width:       w,
		Height:      h,
		IsLoading:   true,
		ListFocused: true,
		Keymap:      keymap.NewVulnMap(),
		Help:        styledhelp.NewStyledHelp(keymap.NewVulnMap().Bindings(), w),
		List:        NewVulnerabilityList(w*4/5-3, h-8-strings.Count(styles.VulnerabilityText, "\n")),
		ScanList:    NewScanList(w/5-3, h-6-strings.Count(styles.VulnerabilityText, "\n")),
	}
}

func (s *Vulnerability) Init() tea.Cmd {
	return tea.Batch(s.List.Init(), s.ScanList.Init())
}

func (s *Vulnerability) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case messages.ScannerListMsg:
		var cmd tea.Cmd
		s.ScanList, cmd = s.ScanList.Update(msg)
		return s, cmd
	case messages.ScanResponse:
		var cmd tea.Cmd
		s.List, cmd = s.List.Update(msg)
		return s, cmd
	case messages.StartScanMsg:
		scanner, found := s.ScanList.GetSelected()
		if !found {
			return s, func() tea.Msg {
				return messages.ScanResponse{Arr: nil, Err: errors.New(scanner + ": scanner not found")}
			}
		}
		return s, tea.Tick(0, func(_ time.Time) tea.Msg {
			switch scanner {
			case "trivy":
				arr, err := docker.TrivyScanImage(msg.Img)
				return messages.ScanResponse{
					Arr: utils.ToAnySlice(arr),
					Err: err,
				}
			case "grype":
				arr, err := docker.TrivyScanImage(msg.Img)
				return messages.ScanResponse{
					Arr: utils.ToAnySlice(arr),
					Err: err,
				}
			default:
				return messages.ScanResponse{
					Err: errors.New("invalid scanner"),
				}
			}
		})

	case tea.KeyMsg:
		switch {
		case key.Matches(msg, s.Keymap.FocusScanners):
			s.ListFocused = false
			return s, nil
		case key.Matches(msg, s.Keymap.FocusList):
			s.ListFocused = true
			return s, nil
		case key.Matches(msg, s.Keymap.Export):
			arr := make([]string, 0)
			for _, v := range s.List.Items {
				arr = append(arr, v.Format(s.Width))
			}

			err := docker.Export(arr, "vuln")
			if err != nil {
				return s, utils.ReturnError("Vulnerability", "Error Exporting", err)
			}

			return s, utils.ReturnMsg("Vulnerability", "Exported Successfully", "exported vulnerabilities to export dir.")
		}
	}

	if s.ListFocused {
		var cmd tea.Cmd
		s.List, cmd = s.List.Update(msg)
		return s, cmd
	} else {
		var cmd tea.Cmd
		s.ScanList, cmd = s.ScanList.Update(msg)
		return s, cmd
	}
}

func (s *Vulnerability) View() string {
	if s.ListFocused {
		s.ScanList.Focused = false
		s.List.Focused = true
	} else {
		s.ScanList.Focused = true
		s.List.Focused = false
	}

	return lipgloss.JoinVertical(lipgloss.Center,
		styles.TextStyle().Render(styles.VulnerabilityText), lipgloss.JoinHorizontal(lipgloss.Center, s.ScanList.View(), s.List.View()),
		s.Help.View())
}
