package vulnerability

import (
	"fmt"
	"time"

	"github.com/NucleoFusion/cruise/internal/colors"
	"github.com/NucleoFusion/cruise/internal/docker"
	"github.com/NucleoFusion/cruise/internal/messages"
	"github.com/NucleoFusion/cruise/internal/styles"
	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type ScanList struct {
	Width     int
	Height    int
	Vp        viewport.Model
	Scanners  []string
	Found     []bool
	Focused   bool
	IsLoading bool
}

func NewScanList(w int, h int) *ScanList {
	vp := viewport.New(w+3, h+2)
	vp.Style = lipgloss.NewStyle().Border(lipgloss.RoundedBorder()).BorderForeground(colors.Load().Lavender).
		Padding(1).Foreground(colors.Load().Text)

	return &ScanList{
		Width:     w,
		Height:    h,
		Vp:        vp,
		Scanners:  []string{"trivy", "grype"},
		IsLoading: true,
	}
}

func (s *ScanList) Init() tea.Cmd {
	return tea.Tick(0, func(_ time.Time) tea.Msg {
		arr := make([]bool, 0, len(s.Scanners))
		for _, v := range s.Scanners {
			arr = append(arr, docker.ScannerAvailable(v))
		}

		return messages.ScannerListMsg{
			Found: arr,
		}
	})
}

func (s *ScanList) Update(msg tea.Msg) (*ScanList, tea.Cmd) {
	switch msg := msg.(type) {
	case messages.ScannerListMsg:
		s.Found = msg.Found
		s.IsLoading = false
		return s, nil
	}
	return s, nil
}

func (s *ScanList) View() string {
	style := lipgloss.NewStyle().Border(lipgloss.RoundedBorder()).BorderForeground(colors.Load().Surface0)
	if s.Focused {
		style = style.BorderForeground(colors.Load().Lavender)
	}

	if s.IsLoading {
		return style.Render(lipgloss.Place(s.Width, s.Height, lipgloss.Center, lipgloss.Top, "Loading..."))
	}

	s.UpdateText()

	return lipgloss.Place(s.Width, s.Height, lipgloss.Center, lipgloss.Top, s.Vp.View())
}

func (s *ScanList) UpdateText() {
	text := ""
	for k, v := range s.Scanners {
		if s.Found[k] {
			text += v + "\n"
		} else {
			text += fmt.Sprintf("%s - %s\n", v, styles.ErrorStyle().Render("Not Found"))
		}
	}

	s.Vp.SetContent(text)
}
